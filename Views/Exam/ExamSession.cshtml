@model List<LifeSkill.Web.Controllers.ExamController.ExamQuestionViewModel>
@{
    ViewData["Title"] = "Экзамен";
}

<div class="min-h-screen bg-gray-50">
    <div class="container mx-auto max-w-4xl px-4 py-8">
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold text-emerald-600">Итоговый экзамен</h2>
                <div class="flex items-center space-x-4">
                    <div class="text-sm text-gray-600">
                        Вопрос <span id="currentQuestion">1</span> из @Model.Count
                    </div>
                    <div id="timer" class="text-xl font-semibold text-red-600 bg-red-50 px-4 py-2 rounded-lg">
                    </div>
                </div>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5 mb-4">
                <div id="progressBar" class="bg-emerald-600 h-2.5 rounded-full" style="width: 0%"></div>
            </div>
        </div>

        <form id="examForm" asp-action="SubmitExam" asp-controller="Exam" method="post">
            @for (int i = 0; i < Model.Count; i++)
            {
                <input type="hidden" name="questionIds" value="@Model[i].Id" />
                <div class="question-container bg-white rounded-lg shadow-lg p-6 mb-6 @(i == 0 ? "" : "hidden")" data-question="@(i+1)">
                    <div class="mb-6">
                        <div class="flex items-start">
                            <span class="inline-flex items-center justify-center w-8 h-8 rounded-full bg-emerald-100 text-emerald-800 font-semibold mr-3 flex-shrink-0">@(i+1)</span>
                            <div class="text-lg font-medium text-gray-800">@Model[i].QuestionText</div>
                        </div>
                    </div>
                    <div class="space-y-3 ml-11">
                        @for (int j = 0; j < Model[i].Options.Count; j++)
                        {
                            <div>
                                <label class="inline-flex items-center w-full p-4 bg-gray-50 rounded-lg border border-gray-200 hover:border-emerald-300 cursor-pointer transition-colors duration-300">
                                    <input type="radio" name="userAnswers_@i" value="@(j+1)" class="form-radio text-emerald-600" required />
                                    <span class="ml-3 text-gray-700">@Model[i].Options[j]</span>
                                </label>
                            </div>
                        }
                    </div>
                </div>
            }

            <div class="flex justify-between mt-6">
                <div>
                    <button type="button" id="prevBtn" class="px-6 py-3 bg-gray-600 text-white rounded-lg font-semibold hover:bg-gray-700 transition-colors duration-300 hidden">
                        Назад
                    </button>
                </div>
                <div>
                    <button type="button" id="nextBtn" class="px-6 py-3 bg-emerald-600 text-white rounded-lg font-semibold hover:bg-emerald-700 transition-colors duration-300">
                        Следующий
                    </button>
                    <button type="submit" id="submitBtn" class="px-6 py-3 bg-emerald-600 text-white rounded-lg font-semibold hover:bg-emerald-700 transition-colors duration-300 hidden">
                        Завершить экзамен
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div id="timeoutModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg p-8 max-w-md w-full text-center">
        <div class="mb-6">
            <svg class="w-16 h-16 text-red-600 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
        </div>
        <h3 class="text-2xl font-bold text-red-600 mb-4">Время истекло</h3>
        <p class="mb-6 text-gray-600">К сожалению, вы не успели завершить экзамен. Попробуйте в следующий раз!</p>
        <a href="@Url.Action("Index", "Exam")" class="inline-block px-6 py-3 bg-emerald-600 text-white rounded-lg font-semibold hover:bg-emerald-700 transition-colors duration-300">
            Вернуться
        </a>
    </div>
</div>

<script>
    let timer = 15 * 60;
    const timerElement = document.getElementById('timer');
    const examForm = document.getElementById('examForm');
    const timeoutModal = document.getElementById('timeoutModal');
    const progressBar = document.getElementById('progressBar');
    const currentQuestionSpan = document.getElementById('currentQuestion');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    const questionContainers = document.querySelectorAll('.question-container');
    let currentQuestionIndex = 0;

    function updateTimer() {
        const minutes = Math.floor(timer / 60);
        const seconds = timer % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        if (timer <= 0) {
            clearInterval(timerInterval);
            timeoutModal.classList.remove('hidden');
            examForm.classList.add('pointer-events-none', 'opacity-50');
        }
        timer--;
    }

    function updateNavigation() {
        prevBtn.classList.toggle('hidden', currentQuestionIndex === 0);
        nextBtn.classList.toggle('hidden', currentQuestionIndex === questionContainers.length - 1);
        submitBtn.classList.toggle('hidden', currentQuestionIndex !== questionContainers.length - 1);
        currentQuestionSpan.textContent = currentQuestionIndex + 1;
        
        const progress = ((currentQuestionIndex + 1) / questionContainers.length) * 100;
        progressBar.style.width = `${progress}%`;
    }

    function showQuestion(index) {
        questionContainers.forEach((container, i) => {
            container.classList.toggle('hidden', i !== index);
        });
        currentQuestionIndex = index;
        updateNavigation();
    }

    prevBtn.addEventListener('click', () => {
        if (currentQuestionIndex > 0) {
            showQuestion(currentQuestionIndex - 1);
        }
    });

    nextBtn.addEventListener('click', () => {
        if (currentQuestionIndex < questionContainers.length - 1) {
            showQuestion(currentQuestionIndex + 1);
        }
    });

    examForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(examForm);
        const questionIds = [];
        const userAnswers = [];

        formData.getAll('questionIds').forEach(id => questionIds.push(parseInt(id)));

        for (let i = 0; i < questionIds.length; i++) {
            const answer = formData.get(`userAnswers_${i}`);
            if (answer) {
                userAnswers.push(parseInt(answer));
            }
        }

        try {
            await fetch('@Url.Action("SubmitExam", "Exam")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    questionIds: questionIds,
                    userAnswers: userAnswers
                })
            });
            
            window.location.href = '@Url.Action("Success", "Exam")';
        } catch (error) {
            console.error('Ошибка при отправке:', error);
            window.location.href = '@Url.Action("Success", "Exam")';
        }
    });

    updateTimer();
    const timerInterval = setInterval(updateTimer, 1000);
    showQuestion(0);
</script> 